{"version":3,"sources":["Plots.js","Table.js","components/ReadOnlyRow.js","index.js"],"names":["mi","App","points","valuesPlots","colors","plots","i","dataTemp","j","Object","keys","length","x","y","color","className","size","data","style","strokeLinejoin","strokeWidth","width","height","display","stroke","title","line","ticks","text","fill","ReactDOM","render","document","querySelector","Table","model","levelPravil","changeList","changeCoeff","selectedTM","tempus","gettingLevelPravil","select","cartesian","arg","r","args","reduceRight","cont","factor","arr","l","a","slice","Array","prototype","push","bind","t","unshift","cartesian2","undefined","console","log","my","TM","options","name","urovneyObrabotki","id","termsCount","termsNames","term1","term2","term3","coords","x1","y1","x2","y2","x3","y3","x4","y4","plotsColors","pravila_end","1","shapka","termsInputArray","termsInputArray2","tempArray","selectedArray","otarray","doarray","toNode","massivFrom","graph","edges","to","Number","from","otKokogo","doKokogo","termName","eval","map","el","urPravil","temp","temp2","split","ChangeSelect","event","preventDefault","target","getAttribute","row","position","selectedIndex","ChangeCoeff","val","value","urovPravil","prav","index","array","change","urovenPravil","pravila","ReadOnlyRow","rowNumber","rightSide","models","CustomSelect","poryadok","onChange","defaultValue","option","start","class","onInput","type","step","min","max","require","XMLParser","inputLevelCounter","input_Name","FlmTree","randomColor","red","Math","floor","random","toString","padStart","green","blue","createNode","esModel","counter","setEsModel","nodes","font","label","shape","physics","group","locale","interaction","hover","tooltipDelay","selectable","multiselect","dragView","manipulation","enabled","initiallyActive","addNode","editEdge","addEdge","callback","colorChanges","String","methods","UpdatePravila","networks","network","setData","addEdgeMode","deleteEdge","splice","deleteNode","toUninstall","willUpdate","newNames","RenderSelectedTM","layout","hierarchical","direction","sortMethod","blockShifting","levelSeparation","useState","xmlFiles","setXmlFiles","xmlModeling","setxmlModeling","xmlName","setXmlName","o2x","window","onbeforeunload","regimZaprosa","zapros","Name","Author","userRequest","structure","pravilaMode","events","release","getPositions","dragEnd","pos","click","doubleClick","canvas","pointer","AddTMInputLevel","showPopup","setOUTForTM","TmNumber","out","changeRegimVivoda","DefZapros","SetZapros","nymberTM","urovenPrav","leftSide","peresobran","rightPeresobran","RenderPravila","ChangeX","zelen","fiolet","obrabotka","krasn","urovniObrabotki","pp","getLevelTMObrabotki","numberKey","key","outCounter","leftArray","cartes","start2","start3","rSide","changeEsName","RenderOptionsMenu","changeEsAuthor","ChangePravila","urovenObrabotki","ChangePlotColor","TermNumber","deletePointplot","deleteNumber","addNewPointPlot","newPointNumber","newCoordsNameX","newCoordsNameY","changeCoordsValue","deleteTerm","newTermName","pop","popup","addNewTerm","changeTermName","newName","ChangeSelectedTMName","modifiedStr","replace","substr","indexBodyHtml2","setindexBodyHtml2","setNetwork","states","uroven","zz","obj","includes","changePravila","coeff","urObr","SendXmlModelling","tempXML","pravilaDict1","pravilaDict","tempStructure","file","Blob","FormData","append","JSON","stringify","axios","post","then","res","str","p","RenderModelingMenu","SaveToXMLOnComputer","element","createElement","body","appendChild","href","URL","createObjectURL","download","Pravila","okolo","ConsoleXml","xmlStr","sendToServer","File","XmlOnServer","encodedData","decode","Buffer","jObj","parse","match","ChangeColor","DeletePointPlot","changeCoordsValues","AddNewTerm","DeleteTerm","indexB","ChangeZapros","ChangeRegimZaprosa","ChangeZaprosInput","nameTM","number","values","placeholder","onClick","changeSelectedTMName","tm","points4Plots","pravilaButton","isOutCheckBox","nmn","checked","nm","stringLabel","stringNameTerm","xName","yName","GoToPravila","testINFO","findIndex","handleSubmit","reader","FileReader","parser","readAsText","onload","_event","content","result","pravila_temp","handleFileSelect","files","inp_termMn_1","marginLeft","getNetwork","right","border","getElementById"],"mappings":"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","file":"static/js/main.c0e02341.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"react-vis/dist/style.css\";\n\nimport {\n  XYPlot,\n  XAxis,\n  YAxis,\n  VerticalGridLines,\n  HorizontalGridLines,\n  LineMarkSeries,\n  DiscreteColorLegend\n} from \"react-vis\";\n\nlet mi=0\n//<DiscreteColorLegend  orientation=\"horizontal\" items = {series}    />\nlet series= [{\n  title: \"Apples\",\n  color : \"#000000\",\n},\n{title: \"Orange\",\ndisabled: false,\ndata: [{ x: 0, y: 12 }, { x: 1, y: 22 }],\ncolor : \"#FF6c0A\",\n},\n\n]\n\nfunction getRandomColor() {\nvar letters = '0123456789ABCDEF';\nvar color = '#';\nfor (var i = 0; i < 6; i++)\n{\n  color += letters[Math.floor(Math.random() * 16)];\n}\nreturn color;\n}\nexport default function App(points, valuesPlots, colors) {\n  if(valuesPlots > 0)\n  {\n    mi = valuesPlots\n  }\n  let x1_1,x2_1,x3_1,y1_1,y2_1,y3_1\n  let x4_1 = 1\n  let y4_1 = 0\n  let x1_2,x2_2,x3_2,x4_2,y1_2,y2_2,y3_2,y4_2\n  let x1_3,x2_3,x3_3,x4_3,y1_3,y2_3,y3_3,y4_3\n  let x1_4,x2_4,x3_4,x4_4,y1_4,y2_4,y3_4,y4_4\n\n\n\n  let x1_5,x2_5,x3_5,x4_5,y1_5,y2_5,y3_5,y4_5\n  let x1_6,x2_6,x3_6,x4_6,y1_6,y2_6,y3_6,y4_6\n  let x1_7,x2_7,x3_7,x4_7,y1_7,y2_7,y3_7,y4_7\n  let x1_8,x2_8,x3_8,x4_8,y1_8,y2_8,y3_8,y4_8\n  let x1_9,x2_9,x3_9,x4_9,y1_9,y2_9,y3_9,y4_9\n  let x1_10,x2_10,x3_10,x4_10,y1_10,y2_10,y3_10,y4_10\n  const lines = [{x:5,y:2},{x:6,y:2}]\n\n\n  let color = []\n  let items = {title: \"hello\", color : \"#D1D0CE\"}\n/*\n  //заполнить все переменные для всех графиков значениями координат\n  for (let i = 0; i < mi; i++)\n  {\n    if(typeof points[i] == 'object' )\n    {\n      let b = points[i]\n      eval(\"x1_\"+(i+1) + \"=\" +b[0]) \n      eval(\"y1_\"+(i+1) + \"=\" +b[1]) \n      eval(\"x2_\"+(i+1) + \"=\" +b[2]) \n      eval(\"y2_\"+(i+1) + \"=\" +b[3]) \n      eval(\"x3_\"+(i+1) + \"=\" +b[4]) \n      eval(\"y3_\"+(i+1) + \"=\" +b[5]) \n      eval(\"x4_\"+(i+1) + \"=\" +b[6]) \n      eval(\"y4_\"+(i+1) + \"=\" +b[7])  \n      color[i] = getRandomColor();\n    }\n  }\n*/\n let plots = []\nfor (let i = 0; i < mi; i++)\n  {\n    if(typeof points[i] == 'object' )\n    {\n      let dataTemp = [{}]\n      for(let j = 0; j <Object.keys(points[i]).length/2; j++)\n      {dataTemp[j]=({x: points[i][\"x\"+(j+1)],y: points[i][\"y\"+(j+1)] })\n\n      }\n \n  plots[i]=[<LineMarkSeries\n  color =  {colors[i]}\n  className=\"1-series\"\n  size='3.5'\n  \n\n\n  data={dataTemp}\n  style={{\n    strokeLinejoin: \"round\",\n    strokeWidth: 2\n  }}\n/>\n]\n   } }\n  return (    \n    <XYPlot width={700} height={200} display = \"inline-block\">\n      <HorizontalGridLines style={{ stroke: \"#D1D0CE\" }} />\n      <VerticalGridLines style={{ stroke: \"#D1D0CE\" }} />\n      <XAxis\n        title=\"x\"\n        style={{\n          line: { stroke: \"#111111\" },\n          ticks: { stroke: \"#6b6b76\" },\n          text: { stroke: \"none\", fill: \"#6b6b76\" }\n        }}\n      />\n       <YAxis\n        title=\"Коэфф. уверенности\"\n        style={{\n          line: { stroke: \"#6b6b76\" },\n          ticks: { stroke: \"#6b6b76\" },\n          text: { stroke: \"none\", fill: \"#6b6b76\"}\n        }}\n      />\n      \n  {plots}\n\n      \n\n  \n    </XYPlot>\n  );\n  \n}\nReactDOM.render(<App />, document.querySelector(\"#root\"));","import React from \"react\";\nimport \"./Table.css\";\nimport ReadOnlyRow from \"./components/ReadOnlyRow\";\nimport ReactDOM from \"react-dom\";\nexport  default function Table(model, levelPravil, changeList, changeCoeff,selectedTM) {\n\n  let tempus=[[]]\n  let gettingLevelPravil = levelPravil \n  let select = selectedTM\n  if (select == undefined)\n  select = 1\n  console.log(select)\n  if(typeof(gettingLevelPravil) != \"string\")\n  {\n    gettingLevelPravil =1 \n  \n  }\n  function cartesian(arg) {\n    var r = [], args = arg;\n    args.reduceRight(function(cont, factor, i) {\n        return function(arr) {\n            for (var j=0, l=factor.length; j<l; j++) {\n                var a = arr.slice(); // clone arr\n                a[i] = factor[j];\n                cont(a);\n            }\n        };\n    }, Array.prototype.push.bind(r))(new Array(args.length));\nlet t = r.length\n   for(let i = 0; i < t; i++)\n    {\n      r[i].unshift(i+1)\n    }   \n    return r;\n}\nfunction cartesian2(arg) {\n  var r = [], args = arg;\n  args.reduceRight(function(cont, factor, i) {\n      return function(arr) {\n          for (var j=0, l=factor.length; j<l; j++) {\n              var a = arr.slice(); // clone arr\n              a[i] = factor[j];\n              cont(a);\n          }\n      };\n  }, Array.prototype.push.bind(r))(new Array(args.length));\nlet t = r.length \n  return r;\n}\n\n//посмотреть терм-множ. у входного \n//посмотреть терм-множ. у обработки-1\n//это будет названия столбцов \n//console.log(model.termMnogestvaInputLevel[0])\n\nlet my = model\n//if(model == null)\nif(my.TM == undefined)\nmy = {  \n  options: {\n    name: \"Экспертная система 1\",\n    urovneyObrabotki: 3,\n  },\n  TM: \n  [\n    //объект первого терм множества входа\n    {\n        id: '1',\n        name: 'Тип постройки',\n        termsCount:3,\n        termsNames: {term1: 'Общ. здание', term2: 'Жилое здание', term3:'С/Х',},\n        coords:[{x1:0, y1:0, x2:1, y2:1, x3:1, y3:5},\n                {x1:2, y1:0, x2:3, y2:1, x3:3, y3:5 },\n                {x1:4, y1:0, x2:5, y2:2, x3:6, y3:2, x4:7, y4:0 } ,       \n              ],    \n              plotsColors:['#000000','#000000','#FF00D0',] ,   \n    },\n    {\n      id: '2',\n      name: 'Материал',\n      termsCount:3,\n      termsNames: {term1: 'Дерево', term2: 'Бетон', term3:'Кирпич',},\n      coords:[{x1:0, y1:0, x2:1, y2:1, x3:2, y3:0},\n              {x1:2, y1:0, x2:3, y2:1, x3:4, y3:0 },\n              {x1:4, y1:0, x2:5, y2:1, x3:6, y3:0, } ,        \n            ],    \n            plotsColors:['#00FF00','#E30202','#FF00D0',] , \n    },\n    {\n      id: '3',\n      name: 'Климат',\n      termsCount:3,\n      termsNames: {term1: 'Холодный', term2: 'Прохладный', term3:'Теплый',},\n      coords:[{x1:0, y1:0, x2:1, y2:1, x3:2, y3:0},\n              {x1:2, y1:0, x2:3, y2:1, x3:4, y3:0 },\n              {x1:4, y1:0, x2:5, y2:1, x3:6, y3:0, } ,        \n            ],    \n            plotsColors:['#00FF00','#E30202','#FF00D0',] ,     \n              },\n  ]  ,\n  pravila_end: \n  {1:['1_1...1_1',\n  '1_2...2_0.8',\n  '1_3...1_0.9',\n\n  '2_1...2_0.7',\n  '2_2...1_0.9',\n  '2_3...2_1',\n\n  '3_1...1_0.9',\n  '3_2...1_0.8',\n  '3_3...2_0.9',\n  ], }}\n \n  const shapka= [];\n  let termsInputArray=[[]]\n  let termsInputArray2=[[]]\n  let tempArray=[]\n  let selectedArray=[]\n  let otarray=[]\n  let doarray=[]\n  otarray.push(my.TM[0])\n  otarray.push(my.TM[1])\n  doarray.push(my.TM[2])\n\nif(model.TM!=undefined)\n{\n  otarray = []\n  doarray=[]\n  console.log(selectedTM)\n  let toNode = selectedTM\n\n  \n  let massivFrom =[]\n  //создаем массив otKokogo\n  for(let i = 0; i < my.graph.edges.length; i ++)\n        {\n          if(my.graph.edges[i].to == Number(toNode))\n          {\n            massivFrom.push(my.graph.edges[i].from )\n          }\n        }  \n        for(let i = 0; i <massivFrom.length; i ++)\n        {for(let j = 0; j <my.TM.length; j ++)\n          {\n            if(my.TM[j].id == Number(massivFrom[i]-1))\n          {\n            otarray.push(my.TM[j])\n          }  \n          } \n        }       \n        for(let i = 0; i < my.TM.length; i ++)\n        {\n          if(my.TM[i].id == Number(toNode-1))\n          { \n            doarray.push(my.TM[i])\n          }\n        }\n        console.log(doarray)\n}\n  //делаем массив всех термов из терммножества входа\n  \n  \n \n  let otKokogo = otarray//eval(\"my.TM\")// dfdf\n  let doKokogo = doarray//eval(\"my.termMnogestvaOutputLevel\") \n  console.log(otKokogo)\n  shapka.push(<th>№</th>)\n  for(let i = 0; i < otKokogo.length; i++)\n  {\n   let  name = otKokogo[i].name\nshapka.push(<th>{otKokogo[i].name}</th>)\n\n  }\n\n  for(let i = 0; i < doKokogo.length; i++)\n  {\n   let  name = doKokogo[i].name\nshapka.push(<th>{doKokogo[i].name}</th>)\n\n  }\n\n \n  for(let i = 0; i < otKokogo.length; i++)\n{    \n \n  for(let j = 0; j < otKokogo[i].termsCount; j++)\n  {     \n    console.log(otKokogo[0].termsNames['term1'])   \n        console.log(i )\n        console.log(j+1 )\n    let termName = eval(\"otKokogo[\" +i+\"].termsNames['term\"+(j+1)+\"']\")     \n    tempArray[j] = termName       \n  } \n    termsInputArray2[i]=(tempArray)    \n    tempArray = []  \n}\n\ntermsInputArray2 =cartesian2(termsInputArray2)\n\ntermsInputArray2.map((el)=> (el.push(\"...\")))\n\n  for(let i = 0; i < doKokogo.length; i++)\n  {    termsInputArray2.map((el)=> (\n\n    el.push(1)    \n    ))\n\n    for(let j = 0; j <doKokogo[i].termsCount; j++)\n    {     \n      let termName = eval(\"doKokogo[\"+i+\"].termsNames['term\"+(j+1)+\"']\")     \n      tempArray[j] = {id: (j+1), name :termName}     \n\n    } \n    selectedArray[i]=(tempArray)    \n      tempArray = []  \n  }\n \n\nfor(let i = 0; i < doKokogo.length; i++)\n{    let tempArray=[]\n  for(let j = 0; j < doKokogo[i].termsCount; j++)\n  {     \n    let termName = eval(\"doKokogo[\"+i+\"].termsNames['term\"+(j+1)+\"']\")     \n    tempArray[j] = {id: (j+1), name :termName}     \n\n  } \n  selectedArray[i]=(tempArray)    \n    tempArray = []  \n}\nconsole.log(selectedTM)\nlet urPravil = eval(\"my.pravila_end[\" +selectedTM+\"]\") \nif(urPravil!= undefined)\n  {    \n    for(let i =0; i<urPravil.length;i++)\n    {\n      let temp \n      let temp2 =[]\n      for(let j=0; j< urPravil[i].split(\"...\")[0].split(\"_\").length+1; j++)    \n    {\n      let termName\n        if(j==0)\ntermName = i+1\n        else{ temp= urPravil[i].split(\"...\")[0].split(\"_\")[j-1]\n         termName = eval(\"otKokogo[\"+(j-1)+\"].termsNames['term\"+(temp)+\"']\") \n       \n  }\n  temp2[j] = termName}\n  tempus[i] = temp2    }}\n  const ChangeSelect = (event) => {\n  event.preventDefault();\n\n  const fieldName = event.target.getAttribute(\"name\");\n  let location = event.target.id.split(\"__\")[0].split(\"_\")[0]\n let row = event.target.id.split(\"__\")[0].split(\"_\")[1]\n let position = event.target.id.split(\"__\")[1]\n position = position.split(\"/\")[0]\nchangeList(row, position,event.target.options[event.target.selectedIndex].id, select)\n\nfor(let i = 0; i<termsInputArray2[row-1].length; i++ )\n{\nif(termsInputArray2[position-1][i] == \"...\")\n{\n  termsInputArray2[position-1][Number(Number(i)+Number(position))] = Number(event.target.options[event.target.selectedIndex].id)\n  break\n}}};\nconst ChangeCoeff= (event) => {\n  event.preventDefault();\n\nlet val = event.target.value\n // const fieldName = event.target.getAttribute(\"name\");\n let location = event.target.id.split(\"__\")[0].split(\"_\")[0]\nlet row = event.target.id.split(\"__\")[0].split(\"_\")[1]\nlet position = event.target.id.split(\"__\")[1]\nlet urovPravil =  select//event.target.id.split(\"__\")[0].split(\"_\")[0]\nposition = position.split(\"/\")[0]\nchangeCoeff(row, position,val,urovPravil)\nconsole.log(\"row=\"+row)\nconsole.log(\"position=\"+position)\nconsole.log(\"urovPravil=\"+urovPravil)\n\n\n/*\nfor(let i = 0; i<termsInputArray2[location-1].length; i++ )\n{\n\nif(termsInputArray2[location-1][i] == \"...\")\n{\ntermsInputArray2[location-1][Number(Number(i)+Number(position))] = Number(event.target.options[event.target.selectedIndex].id)\nbreak\n\n}}*/\n};\nlet prav\n\nprav = eval(\"my.pravila_end\")\nconsole.log(prav)\n\n  return (\n    <div className=\"LayerElement\">\n      <form >\n        <table>\n          <thead>\n            <tr>\n                {shapka}              \n            </tr>\n          </thead>\n          <tbody>\n            {\n                      tempus.map((stroke,index) => (                        \n                           <ReadOnlyRow\n                              stroke={stroke}\n                               array= {selectedArray}\n                               change = {ChangeSelect}\n                               urovenPravil = {levelPravil}\n                               index = {index+1}\n                               pravila = {prav[Number(select)][index]}   \n                               changeCoeff = {ChangeCoeff}                            \n                            /> ))\n            }\n          </tbody>\n        </table>\n      </form>\n\n   \n    </div>\n  );\n};\nReactDOM.render(<Table />, document.querySelector(\"#root\"));\n","import React from \"react\";\n\nconst ReadOnlyRow = ({ stroke,  array,change, urovenPravil, index, pravila, changeCoeff }) => {\n \n  let rowNumber = index\nlet rightSide = pravila.split(\"...\")[1].split(\"-\")\n\nif(rightSide == null)\nrightSide= \"1_1-1_1\"\n\n/* \n  <td>{stroke[0]}</td>\n      <td>{stroke[1]}</td>\n      <td>{stroke[2]}</td>\n      <td>{stroke[3]}</td>\n      <td>1\n       {/* <button\n          type=\"button\"\n          onClick={(event) => handleEditClick(event, contact)}\n        >\n          Edit\n        </button>\n        <button type=\"button\" onClick={() => handleDeleteClick(contact.id)}>\n          Delete\n        </button>\n        </td>\n        <td>1</td>\n*/\n\nlet models= [\n  {\n      id: 1,\n      name: '',\n  },\n\n]\nif(typeof(stroke[1]) == \"string\" &&array.length >0)\nfor(let i =0;i < array[0].length; i++)\n{\nmodels[i] = {id:(i+1),\nname:array[0][i]\n}\n\n}\n\n    // при выборе нового значения в категории\n    const onCategoriesSelectChange = (e) => {\n\n      // преобразуем выбранное значение опции списка в число - идентификатор категории\n      const categoryId = parseInt(e.target.options[e.target.selectedIndex].value);\n  \n      console.log(e.target.options[e.target.selectedIndex].label)\n  }\n\n\n\n\n// компонент пользовательского выпадающего списка\nconst CustomSelect = ({ id, options, onChange, poryadok }) => {\n  let b\n  return (\n      <select className=\"custom-select\" id={id} onChange={change} defaultValue={options[rightSide[poryadok].split(\"_\")[0]-1].name}>\n          { options.map((option, index) =>\n             <option key={id + index} id={option.id} value = {option.name}>{option.name}</option>\n          ) }\n\n      </select>\n  )\n}\n  let arr = []\n  let start = true\n  for (let i = 0; i < stroke.length; i ++)\n  {\nif(start && typeof(stroke[i])=='string')\n{arr[0] =<td>{stroke[i]}</td>\n\n\n}\n\n   else {\n    arr.push(<td>{stroke[i]}</td>)\n   }\n   \n   \nstart = false\n\n  }\n  if(typeof(stroke[1]) == \"string\" &&array.length >0)\n  for(let i =0; i <array.length; i++)\n  {\n    let temp = urovenPravil+\"_\"+rowNumber+\"_\"+\"_\"+(i+1)+\"/\" +array.length\n    arr.push(<td><CustomSelect id={temp} options={array[i]}  poryadok ={i}/>\n    <input  class = \"plotInput\" onInput={changeCoeff}  type='number' step=\"0.1\" min='0' max='1'  id = {temp} name=\"d\"  value={rightSide[i].split(\"_\")[1]} />\n    </td>)\n  }\n\n  return (\n    <tr>\n      {arr}\n    \n    </tr>\n  );\n};\n//  } \nexport default ReadOnlyRow;\n","import Graph from 'react-graph-vis'\nimport React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './Plots.js'\nimport Table from './Table.js'\nimport 'react-vis/dist/style.css'\nimport axios from 'axios'\nconst { XMLParser } = require('fast-xml-parser')\n\nlet inputLevelCounter = 0\nlet input_Name\n\nfunction FlmTree() {\n    function randomColor() {\n        const red = Math.floor(Math.random() * 256)\n            .toString(16)\n            .padStart(2, '0')\n        const green = Math.floor(Math.random() * 256)\n            .toString(16)\n            .padStart(2, '0')\n        const blue = Math.floor(Math.random() * 256)\n            .toString(16)\n            .padStart(2, '0')\n        return `#${red}${green}${blue}`\n    }\n    const createNode = (x, y) => {\n        const color = randomColor()\n\n        esModel.counter++\n        setEsModel(esModel)\n        esModel.graph.nodes.push({\n            x: x,\n            y: y,\n            color: '#F5DEB3',\n            id: esModel.counter,\n            font: { size: 10 },\n            size: 30,\n            label: '',\n            title: '',\n            shape: 'dot',\n            physics: 'false',\n            group: 3,\n        })\n    }\n\n    const options = {\n        locale: 'ru',\n        interaction: {\n            hover: true,\n            tooltipDelay: 10,\n            selectable: true,\n            multiselect: true,\n            dragView: true,\n        },\n        manipulation: {\n            enabled: true,\n            initiallyActive: true,\n            addNode: false,\n            editEdge: false,\n            addEdge: function (data, callback) {\n                esModel.graph.edges.push(data)\n                callback(data)\n                let colorChanges = {}\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\n                    colorChanges[esModel.graph.nodes[i].id] = [0, 0]\n                }\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\n                    colorChanges[esModel.graph.edges[i].to][1] = 1\n                    colorChanges[esModel.graph.edges[i].from][0] = 1\n                }\n\n                esModel.pravila_end = []\n                setEsModel(esModel)\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\n                    if (\n                        colorChanges[esModel.graph.nodes[i].id][0] == 1 &&\n                        colorChanges[esModel.graph.nodes[i].id][1] == 0\n                    ) {\n                        esModel.graph.nodes[i].color = '#008000'\n                    }\n                    if (\n                        colorChanges[esModel.graph.nodes[i].id][0] == 1 &&\n                        colorChanges[esModel.graph.nodes[i].id][1] == 1\n                    ) {\n                        esModel.graph.nodes[i].color = '#DA70D6'\n                    }\n                    if (\n                        colorChanges[esModel.graph.nodes[i].id][0] == 0 &&\n                        colorChanges[esModel.graph.nodes[i].id][1] == 1\n                    ) {\n                        esModel.graph.nodes[i].color = '#FF0000'\n                    }\n                }\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\n                    console.log(esModel.graph.nodes[i].color)\n                    if (\n                        String(esModel.graph.nodes[i].color) == '#FF0000' ||\n                        String(esModel.graph.nodes[i].color) == '#DA70D6'\n                    ) {\n                        esModel.methods.UpdatePravila(esModel.graph.nodes[i].id)\n                    }\n                }\n                setEsModel(esModel)\n                networks.network.setData({\n                    nodes: esModel.graph.nodes,\n                    edges: esModel.graph.edges,\n                })\n                networks.network.addEdgeMode()\n            },\n            deleteEdge: function (data, callback) {\n                callback(data)\n\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\n                    if (esModel.graph.edges[i].id == data.edges[0]) {\n                        esModel.graph.edges.splice(i, 1)\n                        break\n                    }\n                }\n\n                let colorChanges = {}\n\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\n                    colorChanges[esModel.graph.nodes[i].id] = [0, 0]\n                }\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\n                    colorChanges[esModel.graph.edges[i].to][1] = 1\n                    colorChanges[esModel.graph.edges[i].from][0] = 1\n                }\n\n                esModel.pravila_end = []\n                setEsModel(esModel)\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\n                    if (\n                        colorChanges[esModel.graph.nodes[i].id][0] == 1 &&\n                        colorChanges[esModel.graph.nodes[i].id][1] == 0\n                    ) {\n                        esModel.graph.nodes[i].color = '#008000'\n                    }\n                    if (\n                        colorChanges[esModel.graph.nodes[i].id][0] == 1 &&\n                        colorChanges[esModel.graph.nodes[i].id][1] == 1\n                    ) {\n                        esModel.graph.nodes[i].color = '#DA70D6'\n                    }\n                    if (\n                        colorChanges[esModel.graph.nodes[i].id][0] == 0 &&\n                        colorChanges[esModel.graph.nodes[i].id][1] == 1\n                    ) {\n                        esModel.graph.nodes[i].color = '#FF0000'\n                    }\n                    if (\n                        colorChanges[esModel.graph.nodes[i].id][0] == 0 &&\n                        colorChanges[esModel.graph.nodes[i].id][1] == 0\n                    ) {\n                        esModel.graph.nodes[i].color = '#F5DEB3'\n                    }\n                }\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\n                    if (\n                        String(esModel.graph.nodes[i].color) == '#FF0000' ||\n                        String(esModel.graph.nodes[i].color) == '#DA70D6'\n                    ) {\n                        esModel.methods.UpdatePravila(esModel.graph.nodes[i].id)\n                    }\n                }\n                setEsModel(esModel)\n                networks.network.setData({\n                    nodes: esModel.graph.nodes,\n                    edges: esModel.graph.edges,\n                })\n            },\n            deleteNode: function (data, callback) {\n                callback(data)\n                let toUninstall = []\n\n                let willUpdate = false\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\n                    if (\n                        esModel.graph.edges[i].from == data.nodes[0] ||\n                        esModel.graph.edges[i].to == data.nodes[0]\n                    ) {\n                        toUninstall.push(i)\n                    }\n                }\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\n                    if (\n                        esModel.graph.nodes[i].id == data.nodes[0] &&\n                        esModel.graph.nodes[i].color == '#F5DEB3'\n                    ) {\n                        willUpdate = true\n                    }\n\n                    if (\n                        esModel.graph.nodes[i].id == data.nodes[0] &&\n                        (esModel.graph.nodes[i].color == '#008000' ||\n                            esModel.graph.nodes[i].color == '#DA70D6' ||\n                            esModel.graph.nodes[i].color == '#FF0000')\n                    ) {\n                        esModel.pravila_end = []\n                    }\n                }\n\n                for (let i = 0; i < toUninstall.length; i++) {\n                    esModel.graph.edges.splice(\n                        toUninstall[toUninstall.length - 1 - i],\n                        1\n                    )\n                }\n                // esModel.graph.edges.splice(i, 1);\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\n                    if (esModel.graph.nodes[i].id == data.nodes[0]) {\n                        esModel.graph.nodes.splice(i, 1)\n                    }\n                }\n                for (let i = 0; i < esModel.TM.length; i++) {\n                    if (esModel.TM[i].id == data.nodes[0] - 1) {\n                        esModel.TM.splice(i, 1)\n                    }\n                }\n                esModel.counter--\n\n                let newNames = [{}]\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\n                    newNames[esModel.graph.nodes[i].id] = i + 1\n                    esModel.graph.nodes[i].id = i + 1\n                }\n                for (let i = 0; i < esModel.TM.length; i++) {\n                    esModel.TM[i].id = i\n                }\n\n                setEsModel(esModel)\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\n                    esModel.graph.edges[i].from =\n                        newNames[esModel.graph.edges[i].from]\n                    esModel.graph.edges[i].to =\n                        newNames[esModel.graph.edges[i].to]\n                }\n                let colorChanges = {}\n\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\n                    colorChanges[esModel.graph.nodes[i].id] = [0, 0]\n                }\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\n                    colorChanges[esModel.graph.edges[i].to][1] = 1\n                    colorChanges[esModel.graph.edges[i].from][0] = 1\n                }\n\n                setEsModel(esModel)\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\n                    if (\n                        colorChanges[esModel.graph.nodes[i].id][0] == 1 &&\n                        colorChanges[esModel.graph.nodes[i].id][1] == 0\n                    ) {\n                        esModel.graph.nodes[i].color = '#008000'\n                    }\n                    if (\n                        colorChanges[esModel.graph.nodes[i].id][0] == 1 &&\n                        colorChanges[esModel.graph.nodes[i].id][1] == 1\n                    ) {\n                        esModel.graph.nodes[i].color = '#DA70D6'\n                    }\n                    if (\n                        colorChanges[esModel.graph.nodes[i].id][0] == 0 &&\n                        colorChanges[esModel.graph.nodes[i].id][1] == 1\n                    ) {\n                        esModel.graph.nodes[i].color = '#FF0000'\n                    }\n                    if (\n                        colorChanges[esModel.graph.nodes[i].id][0] == 0 &&\n                        colorChanges[esModel.graph.nodes[i].id][1] == 0\n                    ) {\n                        esModel.graph.nodes[i].color = '#F5DEB3'\n                    }\n                }\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\n                    if (\n                        (String(esModel.graph.nodes[i].color) == '#FF0000' ||\n                            String(esModel.graph.nodes[i].color) ==\n                                '#DA70D6') &&\n                        !willUpdate\n                    ) {\n                        esModel.methods.UpdatePravila(esModel.graph.nodes[i].id)\n                    }\n                }\n                setEsModel(esModel)\n                networks.network.setData({\n                    nodes: esModel.graph.nodes,\n                    edges: esModel.graph.edges,\n                })\n                RenderSelectedTM(0)\n            },\n        },\n        layout: {\n            hierarchical: {\n                enabled: false,\n                direction: 'LR',\n                sortMethod: 'directed',\n                blockShifting: false,\n                levelSeparation: 180,\n            },\n        },\n        edges: {\n            color: '#000000',\n        },\n    }\n\n  \n    \n    const [xmlFiles, setXmlFiles] = useState([])\n    const [xmlModeling, setxmlModeling] = useState([])\n    const [xmlName, setXmlName] = useState([])\n\n    var o2x = require('object-to-xml')\n    window.onbeforeunload = function () {\n        return 'A XHR request is pending, are you sure you want to leave ?'\n    }\n    \n    const [esModel, setEsModel] = useState({\n        regimZaprosa: 1,\n        zapros: {},\n        options: {\n            Name: '',\n            Author: '',\n            userRequest: [],\n        },\n        structure: {},\n        pravilaMode: 0,\n        TM: [],\n        pravila_end: {\n            1: [\n                '1_1...1_1',\n                '1_2...2_0.8',\n                '1_3...1_0.9',\n                '2_1...2_0.7',\n                '2_2...1_0.9',\n                '2_3...2_1',\n                '3_1...1_0.9',\n                '3_2...1_0.8',\n                '3_3...2_0.9',\n            ],\n        },\n        counter: 0,\n        graph: {\n            nodes: [],\n            edges: [],\n        },\n        events: {\n            release: ({ nodes, edges }) => {\n                let pos = networks.network.getPositions()\n            },\n            dragEnd: ({ nodes, edges }) => {\n                let pos = networks.network.getPositions()\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\n                    esModel.graph.nodes[i].x = pos[esModel.graph.nodes[i].id].x\n                    esModel.graph.nodes[i].y = pos[esModel.graph.nodes[i].id].y\n                }\n                setEsModel(esModel)\n                networks.network.setData({\n                    nodes: esModel.graph.nodes,\n                    edges: esModel.graph.edges,\n                })\n            },\n            click: ({ nodes, edges }) => {\n                if (nodes[0] != null) {\n                    RenderSelectedTM(nodes[0] - 1)\n                }\n            },\n\n            doubleClick: ({ pointer: { canvas } }) => {\n                let pos = networks.network.getPositions()\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\n                    esModel.graph.nodes[i].x = pos[esModel.graph.nodes[i].id].x\n                    esModel.graph.nodes[i].y = pos[esModel.graph.nodes[i].id].y\n                }\n                esModel.methods.AddTMInputLevel(esModel.graph.nodes.length)\n                createNode(canvas.x, canvas.y)\n                setEsModel(esModel)\n                networks.network.setData({\n                    nodes: esModel.graph.nodes,\n                    edges: esModel.graph.edges,\n                })\n                RenderSelectedTM(esModel.graph.nodes.length - 1)\n            },\n            showPopup: ({ nodes, edges }) => {},\n        },\n        methods: {\n            setOUTForTM: (TmNumber, value) =>\n        {\n          console.log(\"number=\" + TmNumber + \"   value=\" + value)\n          esModel.TM[TmNumber].out =  !esModel.TM[TmNumber].out ? 1: 0\n          setEsModel(esModel)\n          console.log(esModel.TM)\n         RenderSelectedTM(Number(TmNumber))\n\n        },\n\n\n            changeRegimVivoda: (value) => {\n                esModel.regimZaprosa = value\n                setEsModel(esModel)\n                console.log(value)\n            },\n\n            DefZapros: (TmNumber) => {\n                esModel.zapros[String(TmNumber)] = '1'\n                setEsModel(esModel)\n            },\n            SetZapros: (TmNumber, value) => {\n                esModel.zapros[String(TmNumber)] = value\n                setEsModel(esModel)\n                console.log(esModel.zapros)\n                //RenderModelingMenu()\n            },\n            ChangeCoeff: (row, pos, value, nymberTM) => {\n                let urovenPrav\n                urovenPrav = eval(\n                    'esModel.pravila_end[' + Number(nymberTM) + ']'\n                )\n                let leftSide = urovenPrav[row - 1].split('...')[0]\n                let rightSide = urovenPrav[row - 1].split('...')[1].split('-')\n                rightSide[pos - 1] =\n                    '' + rightSide[pos - 1].split('_')[0] + '_' + value\n                let peresobran = '' + leftSide + '...'\n                let rightPeresobran = ''\n                for (let i = 0; i < rightSide.length; i++) {\n                    rightPeresobran = rightPeresobran + rightSide[i]\n                    if (i + 1 < rightSide.length) {\n                        rightPeresobran = '' + rightPeresobran + '-'\n                    }\n                }\n                peresobran = '' + peresobran + '' + rightPeresobran\n                urovenPrav[row - 1] = peresobran\n                setEsModel(esModel)\n                RenderPravila(Number(nymberTM))\n            },\n            ChangeX: (events) => {\n                let zelen = []\n                let fiolet = []\n                let obr1 = []\n                let obrabotka = {}\n                let krasn = []\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\n                    if (esModel.graph.nodes[i].color == '#008000') {\n                        esModel.graph.nodes[i].y = 0\n                        zelen[zelen.length] = i + 1\n                        esModel.graph.nodes[i].x = -300 + zelen.length * 80\n                    }\n                    if (esModel.graph.nodes[i].color == '#DA70D6') {\n                        esModel.graph.nodes[i].y = -250\n                        fiolet[fiolet.length] = i + 1\n                    }\n                    if (esModel.graph.nodes[i].color == '#FF0000') {\n                        esModel.graph.nodes[i].y = -500\n                        krasn[krasn.length] = i + 1\n                    }\n                }\n                obrabotka['input'] = zelen\n                obrabotka['output'] = krasn\n                let spisok = {}\n                urovniObrabotki = {}\n                for (let i = 0; i < fiolet.length; i++) {\n                    pp = []\n                    getLevelTMObrabotki(fiolet[i], zelen)\n                }\n                let numberKey = 50\n                for (var key in urovniObrabotki) {\n                    urovniObrabotki[numberKey] = urovniObrabotki[key]\n                    numberKey++\n                    delete urovniObrabotki[key]\n                }\n                numberKey = 1\n                for (var key in urovniObrabotki) {\n                    urovniObrabotki[numberKey] = urovniObrabotki[key]\n                    numberKey++\n                    delete urovniObrabotki[key]\n                }\n\n                for (var key in urovniObrabotki) {\n                    for (let i = 0; i < urovniObrabotki[key].length; i++) {\n                        for (let y = 0; y < esModel.graph.nodes.length; y++) {\n                            if (\n                                esModel.graph.nodes[y].id ==\n                                urovniObrabotki[key][i]\n                            ) {\n                                esModel.graph.nodes[y].y = -100 * Number(key)\n                                esModel.graph.nodes[y].x = -225 + 80 * (i + 1)\n                            }\n                        }\n                    }\n                }\n                let outCounter = 0\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\n                    if (esModel.graph.nodes[i].color == '#FF0000') {\n                        esModel.graph.nodes[i].y =\n                            Object.keys(urovniObrabotki).length * -100 - 100\n                        esModel.graph.nodes[i].x = -150 + 80 * (outCounter + 1)\n                        outCounter++\n                    }\n                }\n                outCounter = 0\n                urovniObrabotki['input'] = zelen\n                urovniObrabotki['output'] = krasn\n                console.log(urovniObrabotki)\n                esModel.structure = urovniObrabotki\n\n                setEsModel(esModel)\n                networks.network.setData({\n                    nodes: esModel.graph.nodes,\n                    edges: esModel.graph.edges,\n                })\n                RenderSelectedTM(0)\n            },\n            UpdatePravila: (events) => {\n                let toNode\n                if (events.target != undefined)\n                    toNode = Number(events.target.id) + 1\n                else toNode = events\n                esModel.pravilaMode = 1\n\n                let otKokogo = []\n                let massivFrom = []\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\n                    if (\n                        esModel.graph.edges[esModel.graph.edges.length - i - 1]\n                            .to == Number(toNode)\n                    ) {\n                        massivFrom.push(\n                            esModel.graph.edges[\n                                esModel.graph.edges.length - i - 1\n                            ].from\n                        )\n                    }\n                }\n                for (let i = 0; i < massivFrom.length; i++) {\n                    for (let j = 0; j < esModel.TM.length; j++) {\n                        if (\n                            esModel.TM[esModel.TM.length - j - 1].id ==\n                            Number(massivFrom[i] - 1)\n                        ) {\n                            otKokogo.push(esModel.TM[esModel.TM.length - j - 1])\n                        }\n                    }\n                }\n                if (otKokogo <= 0) return\n\n                let leftArray = []\n                for (let i = 0; i < otKokogo.length; i++) {\n                    leftArray.push([])\n                    for (\n                        let j = 0;\n                        j < otKokogo[otKokogo.length - 1 - i].termsCount;\n                        j++\n                    ) {\n                        leftArray[i][j] = String(j + 1)\n                    }\n                }\n\n                let arr = []\n                let cartes = cartesian(leftArray)\n                let start2 = false\n                for (let i = 0; i < cartes.length; i++) {\n                    if (!start2) arr.push([])\n                    arr[i] = ''\n                    for (let j = 0; j < cartes[i].length; j++) {\n                        arr[i] += cartes[i][j]\n                        if (j + 1 < cartes[i].length) arr[i] += '_'\n                        else arr[i] += '...'\n                    }\n                    start2 = true\n                }\n                let doKokogo = []\n\n                for (let i = 0; i < esModel.TM.length; i++) {\n                    if (esModel.TM[i].id == Number(toNode - 1)) {\n                        doKokogo.push(esModel.TM[i])\n                    }\n                }\n\n                let start3 = false\n                let rSide = []\n\n                for (let i = 0; i < cartes.length; i++) {\n                    if (!start3) leftArray.push([])\n                    rSide[i] = ''\n                    for (let j = 0; j < doKokogo.length; j++) {\n                        rSide[i] += '1_1'\n                        if (j + 1 < doKokogo.length) rSide[i] += '-'\n                    }\n                    start3 = true\n                }\n                for (let i = 0; i < cartes.length; i++) {\n                    arr[i] += rSide[i]\n                }\n                esModel.pravila_end[String(toNode)] = arr\n                setEsModel(esModel)\n            },\n            changeEsName: (value) => {\n                esModel.options.Name = String(value.target.value)\n                setEsModel(esModel)\n                RenderOptionsMenu()\n            },\n            changeEsAuthor: (value) => {\n                esModel.options.Author = String(value)\n                esModel.options.Author = String(value.target.value)\n                setEsModel(esModel)\n                RenderOptionsMenu()\n            },\n            ChangePravila: (row, pos, value, urovenObrabotki) => {\n                let urovenPrav\n                urovenPrav = esModel.pravila_end[urovenObrabotki]\n                let leftSide = urovenPrav[row - 1].split('...')[0]\n                let rightSide = urovenPrav[row - 1].split('...')[1].split('-')\n                rightSide[pos - 1] =\n                    '' + value + '_' + rightSide[pos - 1].split('_')[1]\n\n                let peresobran = '' + leftSide + '...'\n                let rightPeresobran = ''\n                for (let i = 0; i < rightSide.length; i++) {\n                    rightPeresobran = rightPeresobran + rightSide[i]\n                    if (i + 1 < rightSide.length) {\n                        rightPeresobran = '' + rightPeresobran + '-'\n                    }\n                }\n                peresobran = '' + peresobran + '' + rightPeresobran\n                urovenPrav[row - 1] = peresobran\n                setEsModel(esModel)\n            },\n            ChangePlotColor: (TmNumber, TermNumber, color) => {\n                esModel.TM[TmNumber].plotsColors[TermNumber] = color\n                setEsModel(esModel)\n                RenderSelectedTM(Number(TmNumber))\n            },\n            deletePointplot: (TmNumber, TermNumber) => {\n                let deleteNumber =\n                    Object.keys(esModel.TM[TmNumber].coords[TermNumber])\n                        .length / 2\n                delete esModel.TM[TmNumber].coords[TermNumber][\n                    'x' + deleteNumber\n                ]\n                delete esModel.TM[TmNumber].coords[TermNumber][\n                    'y' + deleteNumber\n                ]\n                setEsModel(esModel)\n                RenderSelectedTM(Number(TmNumber))\n            },\n            addNewPointPlot: (TmNumber, TermNumber) => {\n                let newPointNumber =\n                    Object.keys(esModel.TM[TmNumber].coords[TermNumber])\n                        .length /\n                        2 +\n                    1\n                let newCoordsNameX = 'x' + newPointNumber\n                let newCoordsNameY = 'y' + newPointNumber\n                esModel.TM[TmNumber].coords[TermNumber][newCoordsNameX] = 0\n                esModel.TM[TmNumber].coords[TermNumber][newCoordsNameY] = 0\n                setEsModel(esModel)\n                RenderSelectedTM(Number(TmNumber))\n            },\n            changeCoordsValue: (TmNumber, TermNumber, key, value) => {\n                esModel.TM[TmNumber].coords[TermNumber][key] = Number(value)\n                setEsModel(esModel)\n                RenderSelectedTM(Number(TmNumber))\n            },\n            deleteTerm: (TmNumber) => {\n                if (esModel.TM[TmNumber].termsCount == 1) return\n\n                let willUpdate = false\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\n                    if (\n                        esModel.graph.nodes[i].id == Number(TmNumber) + 1 &&\n                        esModel.graph.nodes[i].color == '#F5DEB3'\n                    ) {\n                        willUpdate = true\n                    }\n\n                    if (\n                        esModel.graph.nodes[i].id == Number(TmNumber) + 1 &&\n                        (esModel.graph.nodes[i].color == '#008000' ||\n                            esModel.graph.nodes[i].color == '#DA70D6' ||\n                            esModel.graph.nodes[i].color == '#FF0000')\n                    ) {\n                        esModel.pravila_end = []\n                    }\n                }\n                esModel.TM[TmNumber].termsCount =\n                    esModel.TM[TmNumber].termsCount - 1\n                //\n                let newTermName =\n                    'term' + Object.keys(esModel.TM[TmNumber].termsNames).length\n                delete esModel.TM[TmNumber].termsNames[newTermName]\n                esModel.TM[TmNumber].coords.splice(\n                    esModel.TM[TmNumber].coords.length - 1,\n                    1\n                )\n                esModel.TM[TmNumber].plotsColors.pop()\n                let popup = ''\n                for (let i = 0; i < esModel.TM[TmNumber].termsCount; i++) {\n                    popup +=\n                        '' +\n                        esModel.TM[TmNumber].termsNames[\n                            'term' + String(i + 1)\n                        ] +\n                        '\\n'\n                }\n                esModel.graph.nodes[TmNumber].title = popup\n                networks.network.setData({\n                    nodes: esModel.graph.nodes,\n                    edges: esModel.graph.edges,\n                })\n\n                setEsModel(esModel)\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\n                    if (\n                        (String(esModel.graph.nodes[i].color) == '#FF0000' ||\n                            String(esModel.graph.nodes[i].color) ==\n                                '#DA70D6') &&\n                        !willUpdate\n                    ) {\n                        esModel.methods.UpdatePravila(esModel.graph.nodes[i].id)\n                    }\n                }\n                setEsModel(esModel)\n                RenderSelectedTM(Number(TmNumber))\n            },\n            addNewTerm: (TmNumber) => {\n                let willUpdate = false\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\n                    if (\n                        esModel.graph.nodes[i].id == Number(TmNumber) + 1 &&\n                        esModel.graph.nodes[i].color == '#F5DEB3'\n                    ) {\n                        willUpdate = true\n                    }\n\n                    if (\n                        esModel.graph.nodes[i].id == Number(TmNumber) + 1 &&\n                        (esModel.graph.nodes[i].color == '#008000' ||\n                            esModel.graph.nodes[i].color == '#DA70D6' ||\n                            esModel.graph.nodes[i].color == '#FF0000')\n                    ) {\n                        esModel.pravila_end = []\n                    }\n                }\n                esModel.TM[TmNumber].termsCount =\n                    esModel.TM[TmNumber].termsCount + 1\n                let newTermName =\n                    'term' +\n                    (Object.keys(esModel.TM[TmNumber].termsNames).length + 1)\n                esModel.TM[TmNumber].termsNames[newTermName] = 'new_term'\n                let t = {\n                    x1: 0,\n                    y1: 0,\n                    x2: 0,\n                    y2: 0,\n                    x3: 0,\n                    y3: 0,\n                    x4: 0,\n                    y4: 0,\n                }\n                esModel.TM[TmNumber].coords.push(t)\n                esModel.TM[TmNumber].plotsColors.push('#000000')\n                let popup = ''\n                for (let i = 0; i < esModel.TM[TmNumber].termsCount; i++) {\n                    popup +=\n                        '' +\n                        esModel.TM[TmNumber].termsNames[\n                            'term' + String(i + 1)\n                        ] +\n                        '\\n'\n                }\n                esModel.graph.nodes[TmNumber].title = popup\n                networks.network.setData({\n                    nodes: esModel.graph.nodes,\n                    edges: esModel.graph.edges,\n                })\n\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\n                    if (\n                        (String(esModel.graph.nodes[i].color) == '#FF0000' ||\n                            String(esModel.graph.nodes[i].color) ==\n                                '#DA70D6') &&\n                        !willUpdate\n                    ) {\n                        esModel.methods.UpdatePravila(esModel.graph.nodes[i].id)\n                    }\n                }\n                setEsModel(esModel)\n                RenderSelectedTM(Number(TmNumber))\n            },\n            changeTermName: (TmNumber, TermNumber, newName) => {\n                esModel.TM[TmNumber].termsNames['term' + TermNumber] = newName\n                setEsModel(esModel)\n                let popup = ''\n                for (let i = 0; i < esModel.TM[TmNumber].termsCount; i++) {\n                    popup +=\n                        '' +\n                        esModel.TM[TmNumber].termsNames[\n                            'term' + String(i + 1)\n                        ] +\n                        '\\n'\n                }\n                esModel.graph.nodes[TmNumber].title = popup\n                networks.network.setData({\n                    nodes: esModel.graph.nodes,\n                    edges: esModel.graph.edges,\n                })\n                RenderSelectedTM(Number(TmNumber))\n            },\n\n            AddTMInputLevel: (id) => {\n                esModel.TM.push({\n                    id: id,\n                    name: '',\n                    termsCount: 2,\n                    termsNames: { term1: '', term2: '' },\n                    coords: [\n                        {\n                            x1: 0,\n                            y1: 0,\n                            x2: 0,\n                            y2: 1,\n                            x3: 1,\n                            y3: 1,\n                            x4: 1,\n                            y4: 0,\n                        },\n                        {\n                            x1: 1,\n                            y1: 0,\n                            x2: 1,\n                            y2: 1,\n                            x3: 2,\n                            y3: 1,\n                            x4: 2,\n                            y4: 0,\n                        },\n                    ],\n                    plotsColors: ['#000000', '#000000'],\n                })\n                setEsModel(esModel)\n            },\n            ChangeSelectedTMName: (id, name) => {\n                esModel.TM[id].name = String(name)\n\n\n                let modifiedStr = name.replace(/ /g, \"\\n\")\n                \n                \n               let splitString = \"\";\n                for (let i = 0; i < name.length; i += 15) {\n                  splitString += name.substr(i, 15) + \"\\n\";\n                }\n                esModel.graph.nodes[id].label = modifiedStr\n                setEsModel(esModel)\n                RenderSelectedTM(Number(id))\n                networks.network.setData({\n                    nodes: esModel.graph.nodes,\n                    edges: esModel.graph.edges,\n                })\n            },\n        },\n    })\n    const [indexBodyHtml2, setindexBodyHtml2] = useState([\n        ['НАСТРОЙКИ'],\n        [\n            <div>\n                НАЗВАНИЕ ЭС:{' '}\n                <input\n                    class=\"EsNameInput\"\n                    value={esModel.options.Name}\n                    onInput={esModel.methods.changeEsName}\n                />\n                АВТОР ЭС:{' '}\n                <input\n                    class=\"EsAuthorInput\"\n                    value={esModel.options.Author}\n                    onInput={esModel.methods.changeEsAuthor}\n                />\n            </div>,\n        ],\n    ])\n\n    const { graph, events } = esModel\n    const [networks, setNetwork] = useState({ network: {} })\n    let states = { network: {} }\n\n    let uroven = 0\n    let zz\n    let pp = []\n    let start\n    let urovniObrabotki = {}\n    function getLevelTMObrabotki(obj, zelen) {\n        if (zz == undefined) {\n            zz = zelen\n            start = obj\n        }\n\n        for (let i = 0; i < esModel.graph.edges.length; i++) {\n            if (start == obj) uroven = 0\n            if (esModel.graph.edges[i].to == obj) {\n                uroven = uroven + 1\n                if (zz.includes(esModel.graph.edges[i].from)) {\n                    pp[pp.length] = uroven\n                    uroven = uroven - 1\n                } else getLevelTMObrabotki(esModel.graph.edges[i].from)\n            }\n        }\n        if (start == obj) {\n            console.log(pp)\n            if (urovniObrabotki[Math.max(...pp)] == undefined) {\n                urovniObrabotki[Math.max(...pp)] = []\n                urovniObrabotki[Math.max(...pp)][\n                    urovniObrabotki[Math.max(...pp)].length\n                ] = obj\n                start = undefined\n                zz = undefined\n            } else {\n                urovniObrabotki[Math.max(...pp)][\n                    urovniObrabotki[Math.max(...pp)].length\n                ] = obj\n                start = undefined\n                zz = undefined\n            }\n        }\n    }\n\n    function changePravila(row, pos, value, coeff) {\n        esModel.methods.ChangePravila(row, pos, value, coeff)\n    }\n    function changeCoeff(row, pos, coeff, urObr) {\n        esModel.methods.ChangeCoeff(row, pos, coeff, urObr)\n    }\n\n    function cartesian(arg) {\n        var r = [],\n            args = arg\n        args.reduceRight(function (cont, factor, i) {\n            return function (arr) {\n                for (var j = 0, l = factor.length; j < l; j++) {\n                    var a = arr.slice() // clone arr\n                    a[i] = factor[j]\n                    cont(a)\n                }\n            }\n        }, Array.prototype.push.bind(r))(new Array(args.length))\n        let t = r.length\n        return r\n    }\n\n    function SendXmlModelling() {\n        let tempXML = {}\n        if (esModel.TM.length == 1) {\n            tempXML['TM'] = []\n            tempXML['TM'].push(esModel.TM)\n        } else tempXML['TM'] = esModel.TM\n        let pravilaDict = {}\n        let pravilaDict1 = {}\n        for (let t = 0; t < esModel.pravila_end.length; t++) {\n            let st = '' + t\n            pravilaDict[st] = esModel.pravila_end[t]\n        }\n        pravilaDict1 = pravilaDict\n        for (var key in pravilaDict) {\n            if (pravilaDict[key] == '') {\n                pravilaDict[key] = ''\n            }\n            pravilaDict['n' + key] = pravilaDict[key]\n            delete pravilaDict[key]\n        }\n        tempXML['pravila_end'] = pravilaDict1\n        tempXML['pravila_temp'] = pravilaDict\n        tempXML['graph'] = esModel.graph\n        tempXML['counter'] = esModel.counter\n        tempXML['options'] = esModel.options\n\n        let tempStructure = {} // esModel.structure\n        for (var key in esModel.structure) {\n            tempStructure['n_' + key] = esModel.structure[key]\n        }\n        tempXML['structure'] = tempStructure\n\n        const file = new Blob([o2x(tempXML)], { type: 'text/xml' })\n        const zapros = esModel.zapros // {'1':'1.35','2':'1','3':'1'}\n        setxmlModeling(file)\n        const data = new FormData()\n        data.append('zapros', JSON.stringify(zapros))\n        data.append('file', file)\n        axios\n            .post('https://aesfu.ru/api/study/flm-builder', data, {\n                //https://aesfu.ru/api/study/flm-builder\n            })\n            .then((res) => {\n                if (esModel.regimZaprosa == 1) {\n                    var temp =  res.data\n                    var str = ''\n                    // temp.map((p) => {\n                    //     str += '[' + p[0] + ',' + p[1] + '] \\n'\n                    // })\n                    // RenderModelingMenu(\"[\" + res.data[0] + \",\"+res.data[1]+\"]\")\n                    let p = Object.keys(temp).map((key) => (\n                    str+=  key+\" \"+ temp[key]+ \" \" \n                    ))\n\n\n                        console.log(p)\n\n                    RenderModelingMenu(JSON.stringify(temp))\n                }\n                if (esModel.regimZaprosa == 2) {\n                    // console.log(esModel.structure.output)\n                    // console.log(esModel.TM[esModel.structure.output[0] - 1])\n                    var temp =   res.data\n                    console.log(temp)\n                    var str = ''\n                    // temp.map((item, index) => {\n                    //     str +=\n                    //         esModel.TM[esModel.structure.output[index] - 1]\n                    //             .termsNames['term' + item[0]] +\n                    //         ' с вероятностью ' +\n                    //         item[1] +\n                    //         '  '\n                    // })\n\n                    console.log(esModel)\n                    let p = Object.keys(temp).map((key) => (\n                      // console.log(temp[key])\n                      str+= \"|| \" + esModel.TM[key-1].name+\"->\"+  esModel.TM[key-1].termsNames[('term'+temp[key][0])]  + \"(\"+ temp[key][1] + \") \"+ \" ||\" \n\n\n\n                      ))\n\n                    RenderModelingMenu(str)\n                }\n            })\n    }\n\n    function SaveToXMLOnComputer() {\n        let tempXML = {}\n        if (esModel.TM.length == 1) {\n            tempXML['TM'] = []\n            tempXML['TM'].push(esModel.TM)\n        } else tempXML['TM'] = esModel.TM\n\n        console.log(esModel.pravila_end)\n        let pravilaDict = {}\n        let pravilaDict1 = {}\n        for (let t = 0; t < esModel.pravila_end.length; t++) {\n            let st = '' + t\n            pravilaDict[st] = esModel.pravila_end[t]\n        }\n        pravilaDict1 = pravilaDict\n        for (var key in pravilaDict) {\n            if (pravilaDict[key] == '') {\n                pravilaDict[key] = ''\n            }\n            pravilaDict['n' + key] = pravilaDict[key]\n            delete pravilaDict[key]\n        }\n        console.log(pravilaDict)\n        tempXML['pravila_end'] = pravilaDict1\n        tempXML['pravila_temp'] = pravilaDict\n        tempXML['graph'] = esModel.graph\n        tempXML['counter'] = esModel.counter\n        tempXML['options'] = esModel.options\n\n        let tempStructure = {} // esModel.structure\n        for (var key in esModel.structure) {\n            tempStructure['n_' + key] = esModel.structure[key]\n        }\n        tempXML['structure'] = tempStructure\n\n        const element = document.createElement('a')\n        document.body.appendChild(element)\n\n        const file = new Blob([o2x(tempXML)], { type: 'text/xml' })\n        element.href = URL.createObjectURL(file)\n        element.download = 'myFile654.xml'\n        element.click()\n    }\n    function Pravila(arg) {\n        let uroven = 0\n        let urovniPravil = []\n        let okolo = []\n        okolo.push(\n            <div class=\"LayerElement\">\n                {Table(esModel, 2, changePravila, changeCoeff, arg)}\n            </div>\n        )\n\n        setindexBodyHtml2(okolo)\n    }\n    function ConsoleXml(xmlStr) {\n        console.log(xmlStr)\n        const a = document.createElement('a')\n        document.body.appendChild(a)\n        a.download = 'FLMmodel.xml'\n        const file = new File([xmlStr], 'FLMmodel.xml', { type: 'text/xml' })\n        sendToServer(file)\n    }\n    function XmlOnServer() {\n        //let f = new File(\"./temp.xml\")\n        const iconv = require('iconv-lite')\n        const encodedData = iconv.decode(Buffer.from(xmlFiles), 'utf-8') //windows-1251 //Buffer.from(response.data)\n        const parser = new XMLParser()\n        let jObj = parser.parse(encodedData)\n        console.log(jObj)\n        /*\n\nconst axios = require('axios').default;\naxios.get(\"/xmlS/filedddd.xml\", {\n    responseType: 'arraybuffer',\n    responseEncoding: 'binary'\n\n}).then((response) => {\n\n\n})\n.catch((response) => {\n  console.log('FAILURE!!'+response);\n}); */\n    }\n\n    const changeTermName = (event) => {\n        input_Name = event.target.value\n\n        if (\n            event.target.name.split('_')[0].match(/[a-zA-Z]+/g)[0] ==\n            'termInput'\n        ) {\n            esModel.methods.changeTermName(\n                event.target.name.split('_')[0].match(/\\d+/g)[0],\n                event.target.name.split('_')[1],\n                event.target.value\n            )\n        }\n    }\n\n    const ChangeColor = (event) => {\n        if (\n            event.target.id.split('_')[0].match(/[a-zA-Z]+/g)[0] == 'termInput'\n        ) {\n            esModel.methods.ChangePlotColor(\n                event.target.id.split('_')[0].match(/\\d+/g)[0],\n                event.target.id.split('_')[1] - 1,\n                event.target.value\n            )\n        }\n    }\n    const DeletePointPlot = (event) => {\n        if (\n            event.target.id.split('_')[0].match(/[a-zA-Z]+/g)[0] == 'termInput'\n        ) {\n            esModel.methods.deletePointplot(\n                event.target.id.split('_')[0].match(/\\d+/g)[0],\n                event.target.id.split('_')[1] - 1\n            )\n        }\n    }\n    const changeCoordsValues = (event) => {\n        input_Name = event.target.name\n        if (\n            event.target.id.split('_')[0].match(/[a-zA-Z]+/g)[0] == 'termInput'\n        ) {\n            esModel.methods.changeCoordsValue(\n                event.target.id.split('_')[0].match(/\\d+/g)[0],\n                event.target.id.split('_')[1] - 1,\n                event.target.name.split('_')[0],\n                event.target.value\n            )\n        }\n    }\n    const addNewPointPlot = (event) => {\n        if (\n            event.target.id.split('_')[0].match(/[a-zA-Z]+/g)[0] == 'termInput'\n        ) {\n            esModel.methods.addNewPointPlot(\n                event.target.id.split('_')[0].match(/\\d+/g)[0],\n                event.target.id.split('_')[1] - 1\n            )\n        }\n    }\n\n    const AddNewTerm = (event) => {\n        esModel.methods.addNewTerm(event.target.id)\n    }\n    const DeleteTerm = (event) => {\n        esModel.methods.deleteTerm(event.target.id)\n    }\n\n    const RenderOptionsMenu = (selectedIndex) => {\n        let indexB = []\n        indexB = ['OPTIONS']\n        indexB.push(\n            <div>\n                NAME ES:\n                <input\n                    class=\"EsNameInput\"\n                    value={esModel.options.Name}\n                    onInput={esModel.methods.changeEsName}\n                />\n                AUTHOR ES:\n                <input\n                    class=\"EsAuthorInput\"\n                    value={esModel.options.Author}\n                    onInput={esModel.methods.changeEsAuthor}\n                />\n            </div>\n        )\n        setindexBodyHtml2(indexB)\n\n        //\n    }\n    const ChangeZapros = (selectedIndex) => {\n        // console.log(selectedIndex.target.id + \" value = \"+String(selectedIndex.target.selectedIndex+1))\n\n        esModel.methods.SetZapros(\n            selectedIndex.target.id,\n            String(selectedIndex.target.selectedIndex + 1)\n        )\n    }\n\n    //режим вывода в окне моделирования\n    const ChangeRegimZaprosa = (selectedIndex) => {\n        // console.log(selectedIndex.target.id + \" value = \"+String(selectedIndex.target.selectedIndex+1))\n        console.log(selectedIndex.target.value)\n        esModel.methods.changeRegimVivoda(selectedIndex.target.value)\n\n        //esModel.methods.SetZapros(selectedIndex.target.id, String(selectedIndex.target.selectedIndex+1))\n    }\n\n    const ChangeZaprosInput = (selectedIndex) => {\n        //console.log(selectedIndex.target.name+\"   \"+String(selectedIndex.target.value))\n\n        esModel.methods.SetZapros(\n            selectedIndex.target.name,\n            String(selectedIndex.target.value)\n        )\n    }\n\n    const RenderModelingMenu = (data) => {\n        let indexB = []\n        indexB = ['МОДЕЛИРОВАНИЕ']\n        console.log(esModel.structure)\n        //onChange={}  console.log(esModel.TM[x].name)\n        indexB.push(\n            <div>\n                <select onChange={ChangeRegimZaprosa}>\n                    <option value=\"1\">Значение</option>\n                    <option value=\"2\">Значение+Расшифровка</option>\n                </select>\n            </div>\n        )\n\n        for (let i = 0; i < esModel.structure['input'].length; i++) {\n            let nameTM = ''\n            let number = 0\n\n            for (let x = 0; x < esModel.TM.length; x++) {\n                if (\n                    esModel.TM[x].id ==\n                    String(esModel.structure['input'][i] - 1)\n                ) {\n                    nameTM += esModel.TM[x].name\n                    number = x\n                }\n            }\n\n            if (esModel.zapros[esModel.structure['input'][i]] == undefined)\n                esModel.methods.DefZapros(esModel.structure['input'][i])\n            //решаем вывести  выпадающий список или поле ввода\n            if (Object.keys(esModel.TM[number].coords[0]).length == 2) {\n                indexB.push(\n                    <div>\n                        ТЕРМ - МНОЖЕСТВО ( {esModel.structure['input'][i]} ) (\n                        {nameTM}):\n                        <select\n                            className=\"custom-select\"\n                            id={esModel.structure['input'][i]}\n                            onChange={ChangeZapros}\n                            defaultValue={\n                                esModel.TM[esModel.structure['input'][i] - 1]\n                                    .termsNames[\n                                    'term' +\n                                        esModel.zapros[\n                                            esModel.structure['input'][i]\n                                        ]\n                                ]\n                            }\n                        >\n                            {Object.values(esModel.TM[number].termsNames).map(\n                                (option, index) => (\n                                    <option\n                                        key={index}\n                                        id={option}\n                                        value={option}\n                                    >\n                                        {option}\n                                    </option>\n                                )\n                            )}\n                        </select>\n                    </div>\n                )\n            } else {\n                indexB.push(\n                    <div>\n                        ТЕРМ - МНОЖЕСТВО ( {esModel.structure['input'][i]} ) (\n                        {nameTM}):\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            placeholder=\"...\"\n                            name={esModel.structure['input'][i]}\n                            onChange={ChangeZaprosInput}\n                        />\n                    </div>\n                )\n            }\n        }\n\n        indexB.push(\n            <div>\n                <button onClick={SendXmlModelling}> МОДЕЛИРОВАТЬ</button>\n            </div>\n        )\n\n        console.log(data)\n        if (typeof data == 'string') indexB.push(<div>{data} </div>)\n        setindexBodyHtml2(indexB)\n    }\n\n    const changeSelectedTMName = (event) => {\n        input_Name = event.target.id\n        if (event.target.id.split('_')[0].match(/[a-zA-Z]+/g)[0] == 'term') {\n            esModel.methods.ChangeSelectedTMName(\n                event.target.id.split('_')[1],\n                event.target.value\n            )\n        }\n    }\n\n\n    const setOUTForTM = (event) => {\n      console.log(event.target.value)\n      input_Name = event.target.id\n      if (event.target.id.split('_')[0].match(/[a-zA-Z]+/g)[0] == 'term') {\n          esModel.methods.setOUTForTM(\n              event.target.id.split('_')[1],\n              event.target.value\n          )\n      }\n  }\n\n\n    const RenderSelectedTM = (selectedIndex) => {\n        //console.log(esModel)\n        let tm\n\n        tm = selectedIndex\n        let arrayTerms = []\n        let temp = []\n        let points4Plots = []\n        let points\n        inputLevelCounter = 0\n        let pravilaButton = []\n        let isOutCheckBox = []\n\n        let nmn = 'term_'+tm\n        for (let i = 0; i < esModel.graph.nodes.length; i++) {\n          if (\n              esModel.graph.nodes[i].id == selectedIndex + 1 &&\n              (esModel.graph.nodes[i].color == '#DA70D6' )\n          ) {\n            isOutCheckBox = [\n              <input\n              type=\"checkbox\"\n              checked={esModel.TM[tm].out}\n              id = {nmn}\n              onChange={setOUTForTM}\n              width = \"1\"          \n            /> \n              ]\n          }\n      }\n\n     \n        for (let i = 0; i < esModel.graph.nodes.length; i++) {\n            if (\n                esModel.graph.nodes[i].id == selectedIndex + 1 &&\n                (esModel.graph.nodes[i].color == '#DA70D6' ||\n                    esModel.graph.nodes[i].color == '#FF0000')\n            ) {\n                pravilaButton = [\n                    <button id={tm} onClick={RenderPravila}>\n                        {' '}\n                        ПРАВИЛА:{' '}\n                    </button>,\n                ]\n            }\n        }\n        for (let i = 0; i < esModel.TM.length; i++) {\n            if (esModel.TM[i].id == tm) {\n                tm = i\n            }\n        }\n\n        let nm = 'term_' + tm\n        temp.push(\n            <div>\n                <div>\n                    {' '}\n                    <label class=\"myLabel\"> ТЕРМ - МНОЖЕСТВО №{tm + 1} </label>\n                </div>\n                <label class=\"myLabel\">НАЗВАНИЕ ТМ: </label>\n                <input\n                    type=\"text\"\n                    value={esModel.TM[tm].name}\n                    className=\"form-control\"\n                    id={nm}\n                    placeholder=\"...\"\n                    onChange={changeSelectedTMName}\n                />\n                <div></div>\n                <label class=\"myLabel\"> ТЕРМОВ В ТМ:  </label>\n                <input\n                    type=\"text\"\n                    value={esModel.TM[tm].termsCount}\n                    className=\"form-control\"\n                    placeholder=\"...\"\n                />\n                <button id={tm} onClick={AddNewTerm}>\n                    {' '}\n                    ДОБАВИТЬ ТЕРМ\n                </button>\n                <button id={tm} onClick={DeleteTerm}>\n                    {' '}\n                    УДАЛИТЬ ТЕРМ\n                </button>\n    \n                {pravilaButton}\n                {isOutCheckBox}\n           \n            </div>\n        )\n        let TMindex = 0\n        for (let i = 0; i < esModel.TM[tm].coords.length; i++) {\n            let j = i + 1\n            let stringLabel = 'ТЕРМ №' + j\n            let stringNameTerm = 'termInput' + tm + '_' + j\n            points4Plots = []\n\n            for (\n                let j = 0;\n                j < Object.keys(esModel.TM[tm].coords[i]).length / 2;\n                j++\n            ) {\n                let xName = 'x' + (j + 1) + '_input'\n                let yName = 'y' + (j + 1) + '_input'\n\n                points4Plots.push(\n                    <div>\n                        x{j + 1}:{' '}\n                        <input\n                            class=\"plotInput\"\n                            type=\"number\"\n                            step=\"0.1\"\n                            min=\"-1000\"\n                            value={esModel.TM[tm].coords[i]['x' + (j + 1)]}\n                            id={stringNameTerm}\n                            name={xName}\n                            onInput={changeCoordsValues}\n                        />\n                        y{j + 1}:{' '}\n                        <input\n                            class=\"plotInput\"\n                            type=\"number\"\n                            step=\"0.1\"\n                            min=\"0\"\n                            value={esModel.TM[tm].coords[i]['y' + (j + 1)]}\n                            id={stringNameTerm}\n                            name={yName}\n                            onInput={changeCoordsValues}\n                        />\n                    </div>\n                )\n            }\n            temp.push(\n                <div class=\"blockMy\">\n                    <div class=\"blockMy\">\n                        <div> {stringLabel} </div>\n                        <div>\n                            <input\n                                name={stringNameTerm}\n                                value={\n                                    esModel.TM[tm].termsNames['term' + (i + 1)]\n                                }\n                                type=\"text\"\n                                onInput={changeTermName}\n                            />{' '}\n                        </div>\n\n                        <div class=\"blockMy\">\n                            <button\n                                onClick={addNewPointPlot}\n                                id={stringNameTerm}\n                            >\n                                +\n                            </button>\n                            <button\n                                onClick={DeletePointPlot}\n                                id={stringNameTerm}\n                            >\n                                -\n                            </button>\n                            <input\n                                type=\"color\"\n                                class=\"odin\"\n                                id={stringNameTerm}\n                                onChange={ChangeColor}\n                                value={esModel.TM[tm].plotsColors[i]}\n                            />\n                        </div>\n                        {points4Plots}\n                    </div>\n                </div>\n            )\n        }\n\n        temp.push(\n            <div class=\"Plot\">\n                <div></div>\n                <div>\n                    {App(\n                        esModel.TM[tm].coords,\n                        esModel.TM[tm].termsCount,\n                        esModel.TM[tm].plotsColors\n                    )}\n                </div>\n            </div>\n        )\n        let okolo = []\n        okolo.push(<div class=\"Blochek\">{temp}</div>)\n        setindexBodyHtml2(okolo)\n        inputLevelCounter++\n        /* <div class = \"Razrez\" >. </div>*/\n    }\n\n    function GoToPravila(index) {\n        esModel.pravilaMode = index\n    }\n\n    const RenderPravila = (events) => {\n        GoToPravila(1)\n        setEsModel(esModel)\n\n        let uroven\n        if (events.target == undefined) uroven = events\n        else uroven = Number(events.target.id) + 1\n\n        console.log(uroven)\n        Pravila(uroven)\n    }\n    function sendToServer(file) {\n        const data = new FormData()\n        data.append('file', file)\n        axios\n            .post('http://localhost:8000/upload', data, {\n                // receive two    parameter endpoint url ,form data\n            })\n            .then((res) => {\n                // then print response status\n                XmlOnServer()\n                setXmlName('' + xmlFiles.name)\n            })\n    }\n\n    function testINFO() {\n        const index = esModel.graph.nodes.findIndex(\n            (obj) => obj.color === '#FF0000'\n        )\n        console.log(index) // 1\n\n        ///esModel.graph.nodes.map((node) => {if (node.color == \"#FF0000\") console.log ()   })\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n\n        const iconv = require('iconv-lite')\n        const fileToArrayBuffer = require('file-to-array-buffer')\n        const reader = new FileReader()\n        var encodedData = ''\n\n        const parser = new XMLParser()\n        reader.readAsText(xmlFiles)\n        reader.onload = (_event) => {\n            const content = _event.target.result\n            let jObj = parser.parse(content)\n\n            console.log(jObj)\n            if (jObj.TM.length == undefined) {\n                esModel.TM = []\n                esModel.TM[0] = jObj.TM\n            } else esModel.TM = jObj.TM\n\n            esModel.graph = jObj.graph\n            esModel.counter = jObj.counter\n            esModel.options = jObj.options\n            let tempStructure = {}\n            for (let i = 0; i < Object.keys(jObj.structure).length; i++) {\n                tempStructure[Object.keys(jObj.structure)[i].split('_')[1]] =\n                    jObj.structure[Object.keys(jObj.structure)[i]]\n            }\n\n            esModel.structure = tempStructure\n            esModel.pravila_end = [] //jObj.pravila_end\n            for (let i = 0; i < Object.keys(jObj.pravila_temp).length; i++) {\n                esModel.pravila_end[i] = jObj.pravila_temp['n' + i]\n            }\n            setEsModel(esModel)\n            RenderOptionsMenu()\n            // Do the parsing with content\n        }\n    }\n    const handleFileSelect = (event) => {\n        setXmlFiles(event.target.files[0])\n    }\n    let inp_termMn_1 = 8\n    /*\n<button  onClick={ConsoleXml}> XML</button>\n    <button  onClick={SaveModelToXML}> TO XML</button>\n    <input type=\"file\" id=\"myFile\" onChange={(e)=>UploadXML(e)} />\n*/\n    return (\n        <div  >\n             <div >\n            <button onClick={SaveToXMLOnComputer}>\n                SAVE MODEL TO COMPUTER\n            </button>\n            <button onClick={esModel.methods.ChangeX}>SORT</button>\n            <button onClick={RenderOptionsMenu}>OPTIONS</button>\n            <button onClick={RenderModelingMenu}> MODELING</button>\n            <input type=\"file\" onChange={handleFileSelect} />\n            <button type=\"button\" onClick={handleSubmit}>\n                Загрузить\n            </button>\n            <button type=\"button\" style={{ marginLeft: '4px' }}>\n                <a target=\"_blank\" href=\"https://aesfu.ru/method/flm-builder/instructions\">Документация</a>\n            </button>\n            </div>\n            <div class=\"LayerElement\"> {indexBodyHtml2}</div>\n            <div class=\"LayerElement\">              \n                <Graph\n                    id=\"graph\"\n                    getNetwork={(network) => {\n                        networks.network = network\n                        setNetwork(networks)\n                    }}\n                    graph={esModel.graph}\n                    options={options}\n                    events={esModel.events}\n                    style={{\n                        width: '700px',\n                        height: '600px',\n                        position: 'flex',\n                        right: '0',\n                        border: '1px solid',\n                    }}\n                />\n            </div>\n            \n        </div>\n    )\n}\nReactDOM.render(<FlmTree />, document.getElementById('root'))\n"],"sourceRoot":""}